"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProductsList = void 0;
const AWS = require("aws-sdk");
const constants_1 = require("./constants");
const dynamoDb = new AWS.DynamoDB.DocumentClient();
const getProductsList = async () => {
    try {
        console.log("Incoming request: getallProducts");
        const productsResult = await dynamoDb
            .scan({ TableName: process.env.PRODUCTS_TABLE || constants_1.productsTable })
            .promise();
        const stocksResult = await dynamoDb
            .scan({ TableName: process.env.STOCKS_TABLE || constants_1.stocksTable })
            .promise();
        const products = productsResult.Items;
        const stocks = stocksResult.Items;
        if (products && stocks) {
            const combinedProducts = products.map((product) => {
                const stock = stocks.find((stock) => stock.product_id === product.id);
                return { ...product, count: stock ? stock.count : 0 };
            });
            return {
                statusCode: 200,
                body: JSON.stringify(combinedProducts),
                headers: constants_1.headers,
            };
        }
        else
            return {
                statusCode: 404,
                headers: constants_1.headers,
                body: "products not found",
            };
    }
    catch (err) {
        console.error(err);
        return {
            statusCode: 500,
            headers: constants_1.headers,
            body: JSON.stringify({ message: `something wrong - error ${err}` }),
        };
    }
};
exports.getProductsList = getProductsList;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0UHJvZHVjdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnZXRQcm9kdWN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwrQkFBK0I7QUFDL0IsMkNBQWtFO0FBRWxFLE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUU1QyxNQUFNLGVBQWUsR0FBRyxLQUFLLElBQW9DLEVBQUU7SUFDeEUsSUFBSSxDQUFDO1FBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sY0FBYyxHQUFHLE1BQU0sUUFBUTthQUNsQyxJQUFJLENBQUMsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLElBQUkseUJBQWEsRUFBRSxDQUFDO2FBQ2hFLE9BQU8sRUFBRSxDQUFDO1FBQ2IsTUFBTSxZQUFZLEdBQUcsTUFBTSxRQUFRO2FBQ2hDLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksSUFBSSx1QkFBVyxFQUFFLENBQUM7YUFDNUQsT0FBTyxFQUFFLENBQUM7UUFFYixNQUFNLFFBQVEsR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDO1FBQ3RDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUM7UUFFbEMsSUFBSSxRQUFRLElBQUksTUFBTSxFQUFFLENBQUM7WUFDdkIsTUFBTSxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ2hELE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEtBQUssT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUN0RSxPQUFPLEVBQUUsR0FBRyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDeEQsQ0FBQyxDQUFDLENBQUM7WUFFSCxPQUFPO2dCQUNMLFVBQVUsRUFBRSxHQUFHO2dCQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDO2dCQUN0QyxPQUFPLEVBQVAsbUJBQU87YUFDUixDQUFDO1FBQ0osQ0FBQzs7WUFDQyxPQUFPO2dCQUNMLFVBQVUsRUFBRSxHQUFHO2dCQUNmLE9BQU8sRUFBUCxtQkFBTztnQkFDUCxJQUFJLEVBQUUsb0JBQW9CO2FBQzNCLENBQUM7SUFDTixDQUFDO0lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkIsT0FBTztZQUNMLFVBQVUsRUFBRSxHQUFHO1lBQ2YsT0FBTyxFQUFQLG1CQUFPO1lBQ1AsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsMkJBQTJCLEdBQUcsRUFBRSxFQUFFLENBQUM7U0FDcEUsQ0FBQztJQUNKLENBQUM7QUFDSCxDQUFDLENBQUM7QUF0Q1csUUFBQSxlQUFlLG1CQXNDMUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUElHYXRld2F5UHJveHlSZXN1bHQgfSBmcm9tIFwiYXdzLWxhbWJkYVwiO1xyXG5pbXBvcnQgKiBhcyBBV1MgZnJvbSBcImF3cy1zZGtcIjtcclxuaW1wb3J0IHsgaGVhZGVycywgcHJvZHVjdHNUYWJsZSwgc3RvY2tzVGFibGUgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcclxuXHJcbmNvbnN0IGR5bmFtb0RiID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFByb2R1Y3RzTGlzdCA9IGFzeW5jICgpOiBQcm9taXNlPEFQSUdhdGV3YXlQcm94eVJlc3VsdD4gPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIkluY29taW5nIHJlcXVlc3Q6IGdldGFsbFByb2R1Y3RzXCIpO1xyXG4gICAgY29uc3QgcHJvZHVjdHNSZXN1bHQgPSBhd2FpdCBkeW5hbW9EYlxyXG4gICAgICAuc2Nhbih7IFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuUFJPRFVDVFNfVEFCTEUgfHwgcHJvZHVjdHNUYWJsZSB9KVxyXG4gICAgICAucHJvbWlzZSgpO1xyXG4gICAgY29uc3Qgc3RvY2tzUmVzdWx0ID0gYXdhaXQgZHluYW1vRGJcclxuICAgICAgLnNjYW4oeyBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlNUT0NLU19UQUJMRSB8fCBzdG9ja3NUYWJsZSB9KVxyXG4gICAgICAucHJvbWlzZSgpO1xyXG5cclxuICAgIGNvbnN0IHByb2R1Y3RzID0gcHJvZHVjdHNSZXN1bHQuSXRlbXM7XHJcbiAgICBjb25zdCBzdG9ja3MgPSBzdG9ja3NSZXN1bHQuSXRlbXM7XHJcblxyXG4gICAgaWYgKHByb2R1Y3RzICYmIHN0b2Nrcykge1xyXG4gICAgICBjb25zdCBjb21iaW5lZFByb2R1Y3RzID0gcHJvZHVjdHMubWFwKChwcm9kdWN0KSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3RvY2sgPSBzdG9ja3MuZmluZCgoc3RvY2spID0+IHN0b2NrLnByb2R1Y3RfaWQgPT09IHByb2R1Y3QuaWQpO1xyXG4gICAgICAgIHJldHVybiB7IC4uLnByb2R1Y3QsIGNvdW50OiBzdG9jayA/IHN0b2NrLmNvdW50IDogMCB9O1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGNvbWJpbmVkUHJvZHVjdHMpLFxyXG4gICAgICAgIGhlYWRlcnMsXHJcbiAgICAgIH07XHJcbiAgICB9IGVsc2VcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdGF0dXNDb2RlOiA0MDQsXHJcbiAgICAgICAgaGVhZGVycyxcclxuICAgICAgICBib2R5OiBcInByb2R1Y3RzIG5vdCBmb3VuZFwiLFxyXG4gICAgICB9O1xyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3RhdHVzQ29kZTogNTAwLFxyXG4gICAgICBoZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6IGBzb21ldGhpbmcgd3JvbmcgLSBlcnJvciAke2Vycn1gIH0pLFxyXG4gICAgfTtcclxuICB9XHJcbn07XHJcbiJdfQ==