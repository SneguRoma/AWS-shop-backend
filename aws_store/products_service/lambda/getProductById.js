"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProductById = void 0;
const AWS = require("aws-sdk");
const constants_1 = require("./constants");
const dynamoDb = new AWS.DynamoDB.DocumentClient();
const getProductById = async (event) => {
    try {
        console.log("Incoming request:", event);
        const productId = event.pathParameters?.id;
        if (!productId) {
            return {
                statusCode: 400,
                headers: constants_1.headers,
                body: JSON.stringify({ message: "Product ID is required" }),
            };
        }
        const productResult = await dynamoDb
            .get({
            TableName: process.env.PRODUCTS_TABLE || constants_1.productsTable,
            Key: { id: productId },
        })
            .promise();
        if (!productResult.Item) {
            return {
                statusCode: 404,
                headers: constants_1.headers,
                body: JSON.stringify({ message: "Product not found" }),
            };
        }
        const stockResult = await dynamoDb
            .get({
            TableName: process.env.STOCKS_TABLE || constants_1.stocksTable,
            Key: { product_id: productId },
        })
            .promise();
        const product = productResult.Item;
        const stock = stockResult.Item;
        return {
            statusCode: 200,
            headers: constants_1.headers,
            body: JSON.stringify({ ...product, count: stock ? stock.count : 0 }),
        };
    }
    catch (err) {
        console.log(err);
        return {
            statusCode: 500,
            headers: constants_1.headers,
            body: JSON.stringify({
                message: `something wrong - error ${err}`,
            }),
        };
    }
};
exports.getProductById = getProductById;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0UHJvZHVjdEJ5SWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnZXRQcm9kdWN0QnlJZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwrQkFBK0I7QUFDL0IsMkNBQWtFO0FBRWxFLE1BQU0sUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUU1QyxNQUFNLGNBQWMsR0FBRyxLQUFLLEVBQ2pDLEtBQTJCLEVBQ0ssRUFBRTtJQUNsQyxJQUFJLENBQUM7UUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDO1FBRTNDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNmLE9BQU87Z0JBQ0wsVUFBVSxFQUFFLEdBQUc7Z0JBQ2YsT0FBTyxFQUFQLG1CQUFPO2dCQUNQLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLENBQUM7YUFDNUQsQ0FBQztRQUNKLENBQUM7UUFFRCxNQUFNLGFBQWEsR0FBRyxNQUFNLFFBQVE7YUFDakMsR0FBRyxDQUFDO1lBQ0gsU0FBUyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxJQUFJLHlCQUFhO1lBQ3RELEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUU7U0FDdkIsQ0FBQzthQUNELE9BQU8sRUFBRSxDQUFDO1FBRWIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN4QixPQUFPO2dCQUNMLFVBQVUsRUFBRSxHQUFHO2dCQUNmLE9BQU8sRUFBUCxtQkFBTztnQkFDUCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxDQUFDO2FBQ3ZELENBQUM7UUFDSixDQUFDO1FBQ0QsTUFBTSxXQUFXLEdBQUcsTUFBTSxRQUFRO2FBQy9CLEdBQUcsQ0FBQztZQUNILFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksSUFBSSx1QkFBVztZQUNsRCxHQUFHLEVBQUUsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFO1NBQy9CLENBQUM7YUFDRCxPQUFPLEVBQUUsQ0FBQztRQUViLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUM7UUFDbkMsTUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQztRQUUvQixPQUFPO1lBQ0wsVUFBVSxFQUFFLEdBQUc7WUFDZixPQUFPLEVBQVAsbUJBQU87WUFDUCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUcsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1NBQ3JFLENBQUM7SUFDSixDQUFDO0lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakIsT0FBTztZQUNMLFVBQVUsRUFBRSxHQUFHO1lBQ2YsT0FBTyxFQUFQLG1CQUFPO1lBQ1AsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ25CLE9BQU8sRUFBRSwyQkFBMkIsR0FBRyxFQUFFO2FBQzFDLENBQUM7U0FDSCxDQUFDO0lBQ0osQ0FBQztBQUNILENBQUMsQ0FBQztBQXREVyxRQUFBLGNBQWMsa0JBc0R6QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSUdhdGV3YXlQcm94eUV2ZW50LCBBUElHYXRld2F5UHJveHlSZXN1bHQgfSBmcm9tIFwiYXdzLWxhbWJkYVwiO1xyXG5pbXBvcnQgKiBhcyBBV1MgZnJvbSBcImF3cy1zZGtcIjtcclxuaW1wb3J0IHsgaGVhZGVycywgcHJvZHVjdHNUYWJsZSwgc3RvY2tzVGFibGUgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcclxuXHJcbmNvbnN0IGR5bmFtb0RiID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFByb2R1Y3RCeUlkID0gYXN5bmMgKFxyXG4gIGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudFxyXG4pOiBQcm9taXNlPEFQSUdhdGV3YXlQcm94eVJlc3VsdD4gPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIkluY29taW5nIHJlcXVlc3Q6XCIsIGV2ZW50KTtcclxuICAgIGNvbnN0IHByb2R1Y3RJZCA9IGV2ZW50LnBhdGhQYXJhbWV0ZXJzPy5pZDtcclxuXHJcbiAgICBpZiAoIXByb2R1Y3RJZCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcclxuICAgICAgICBoZWFkZXJzLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogXCJQcm9kdWN0IElEIGlzIHJlcXVpcmVkXCIgfSksXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcHJvZHVjdFJlc3VsdCA9IGF3YWl0IGR5bmFtb0RiXHJcbiAgICAgIC5nZXQoe1xyXG4gICAgICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuUFJPRFVDVFNfVEFCTEUgfHwgcHJvZHVjdHNUYWJsZSxcclxuICAgICAgICBLZXk6IHsgaWQ6IHByb2R1Y3RJZCB9LFxyXG4gICAgICB9KVxyXG4gICAgICAucHJvbWlzZSgpO1xyXG5cclxuICAgIGlmICghcHJvZHVjdFJlc3VsdC5JdGVtKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdHVzQ29kZTogNDA0LFxyXG4gICAgICAgIGhlYWRlcnMsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlOiBcIlByb2R1Y3Qgbm90IGZvdW5kXCIgfSksXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdG9ja1Jlc3VsdCA9IGF3YWl0IGR5bmFtb0RiXHJcbiAgICAgIC5nZXQoe1xyXG4gICAgICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuU1RPQ0tTX1RBQkxFIHx8IHN0b2Nrc1RhYmxlLFxyXG4gICAgICAgIEtleTogeyBwcm9kdWN0X2lkOiBwcm9kdWN0SWQgfSxcclxuICAgICAgfSlcclxuICAgICAgLnByb21pc2UoKTtcclxuXHJcbiAgICBjb25zdCBwcm9kdWN0ID0gcHJvZHVjdFJlc3VsdC5JdGVtO1xyXG4gICAgY29uc3Qgc3RvY2sgPSBzdG9ja1Jlc3VsdC5JdGVtO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0YXR1c0NvZGU6IDIwMCxcclxuICAgICAgaGVhZGVycyxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyAuLi5wcm9kdWN0LCBjb3VudDogc3RvY2sgPyBzdG9jay5jb3VudCA6IDAgfSksXHJcbiAgICB9O1xyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0YXR1c0NvZGU6IDUwMCxcclxuICAgICAgaGVhZGVycyxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIG1lc3NhZ2U6IGBzb21ldGhpbmcgd3JvbmcgLSBlcnJvciAke2Vycn1gLFxyXG4gICAgICB9KSxcclxuICAgIH07XHJcbiAgfVxyXG59O1xyXG4iXX0=